
function get_jsy_src() ::
  const hash = window.location.hash.slice(1)
  return ! hash ? default_jsy_src :
    LZString.decompressFromEncodedURIComponent(hash)

function set_jsy_src(jsy_src) ::
  window.location.hash = (false === jsy_src || default_jsy_src == jsy_src) ? '' :
    LZString.compressToEncodedURIComponent(jsy_src)

window.addEventListener @
  'hashchange'
  () => on_jsy_updated()
  false

const editor_options = @{}
  lineNumbers: true
  theme: 'base16-dark'
  inputStyle: 'contenteditable'

const jsy_editor_options = Object.assign @
  {}, editor_options, window.local_editor_options,
  @{} autofocus: true, tabindex: 1, mode: 'jsy'

const javascript_editor_options = Object.assign @
  {}, editor_options, window.local_editor_options,
  @{} readOnly: true, tabindex: 2, mode: 'javascript'

const doc_editors = window.doc_editors = {}

const page_loaded = new Promise @ resolve => ::
  window.addEventListener @ 'DOMContentLoaded', () => resolve(), false
  window.addEventListener @ 'load', () => resolve(), false


page_loaded
.then @ get_jsy_src
.then @ function(jsy_src) ::
  if ! window.jsy_transpile :: throw new Error('jsy_transpile not loaded')
  if ! window.CodeMirror :: throw new Error('CodeMirror not loaded')

  const ed_jsy = doc_editors.jsy = CodeMirror.fromTextArea @
    document.getElementById('edit_jsy')
    jsy_editor_options

  const ed_javascript = doc_editors.javascript = CodeMirror.fromTextArea @
    document.getElementById('edit_javascript')
    javascript_editor_options

  ed_jsy.setValue(jsy_src)
  ed_jsy.on @ 'change', () => set_jsy_src @ doc_editors.jsy.getValue()

  on_jsy_updated(true)
  return true


window.resetEditor = resetEditor
function resetEditor() ::
  set_jsy_src(false)
  changeEditorOption @:
    keyMap:'default'
    theme: 'base16-dark'

  localStorage.removeItem('editor_options')
  on_jsy_updated(true)


window.changeEditorOption = changeEditorOption
function changeEditorOption(changed_options) ::
  const merged = Object.assign @
    JSON.parse @ localStorage.getItem('editor_options') || '{}'
    changed_options

  localStorage.setItem @ 'editor_options', JSON.stringify(merged)
  window.local_editor_options = merged

  for const [k, v] of Object.entries(changed_options) ::
    for const ed of Object.values(doc_editors) ::
      ed.setOption(k, v)

  on_jsy_updated()
  return merged

function on_jsy_updated(force) ::
  on_jsy_updated.tid = clearTimeout(on_jsy_updated.tid)
  if !force ::
    on_jsy_updated.tid = setTimeout(on_jsy_updated, 200, true)
    return

  const jsy_src = get_jsy_src()
  if jsy_src != doc_editors.jsy.getValue() ::
    doc_editors.jsy.setValue(jsy_src)

  let js_vanilla = ''
  try ::
    js_vanilla = jsy_transpile(jsy_src)
  catch (err) ::
    console.warn('JSY-Transpile Error:', err.message)
    js_vanilla = `// ERROR: ${err.message}`

  if window.local_hightlight_options.use_prettier && window.prettier ::
    const opt = Object.assign @ {},
      window.local_hightlight_options.prettier,
      @{} parser: 'babylon', plugins: prettierPlugins

    js_vanilla = window.prettier.format(js_vanilla, opt)

  doc_editors.javascript.setValue(js_vanilla)
  doJSYHighlight(jsy_src, js_vanilla)


function doJSYHighlight(jsy_src, js_vanilla) ::
  CodeMirror.runMode @ jsy_src, 'jsy', document.getElementById('output_jsy')
  CodeMirror.runMode @ js_vanilla, 'javascript', document.getElementById('output_javascript')

  const theme = window.local_hightlight_options.theme || 'base16-light'
  const theme_class = theme.split(/\s+/).map(n => 'cm-s-'+n).join(' ')
  for const el of document.querySelectorAll('.doc_codeHighlight') ::
    el.className = 'doc_codeHighlight CodeMirror ' + theme_class

window.changeHighlightOption = changeHighlightOption
function changeHighlightOption(changed_options) ::
  const merged = Object.assign @
    JSON.parse @ localStorage.getItem('hightlight_options') || '{}'
    changed_options

  if changed_options ::
    localStorage.setItem @ 'hightlight_options', JSON.stringify(merged)

  window.local_hightlight_options = merged
  on_jsy_updated(true)
  return merged

function prettierOptions(prettier) ::
  changeHighlightOption @:
    prettier: Object.assign({}, prettier)

